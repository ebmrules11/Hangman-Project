/***************************************************************  
*  file: Hangman.java  
*  author: Ethan Bangar-Martinez, Raul Pabian  
*  class: CS 2450 â€“ Programming GUI's 
*  
*  assignment: Program v 1.0  
*  date last modified: 9/12/2019  
*  
*  purpose: This program is a GUI for the game Hangman  
*  
*  
****************************************************************/

//import essential swing features
import java.awt.*;
import java.util.Random;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ebmru
 */
public class Hangman extends javax.swing.JFrame implements ActionListener{

    
    private Timer timer;
    private int wordNum;
    private int colorNum;
    private int colorWordNum;
    private Random rand;
    private int gameScore;
    private int absCount;
    private int cemCount;
    private int pharCount;
    private int nurseCount;
    private int climbCount;
    public int circleCount;
    final private String[] colorWords;
    private int count;
    private int Score1;
    private int Score2;
    private int Score3;
    private int Score4;
    private int Score5;
    private String Name1;
    private String Name2;
    private String Name3;
    private String Name4;
    private String Name5;
    JOptionPane F1Pane = new JOptionPane();
    
    public Hangman() {
        initComponents();
        //initilize variables that track win conditions
        gameScore = 100;
        absCount = 0;
        cemCount = 0;
        pharCount = 0;
        nurseCount = 0;
        climbCount = 0;
        circleCount = 5;
        count = 0;
        colorWords = new String[5];
        colorWords[0] = "Blue";
        colorWords[1] = "Red";
        colorWords[2] = "Yellow";
        colorWords[3] = "Purple";
        colorWords[4] = "Green";
        //timer created for the splash screen set to 3000 to signify 3 second wait time
        timer = new Timer(100, this);
        timer.setInitialDelay(3000);
        timer.setRepeats(false);
        timer.start();
        wordNum = 0;
        colorNum = 0;
        colorWordNum = 0;
        rand = new Random();
        setHighScores();
        OGhighScoreCheck();
        try {
            writeHighScores();
        } catch (IOException ex) {
            Logger.getLogger(Hangman.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parentPanel = new javax.swing.JPanel();
        Startup_Panel = new javax.swing.JPanel();
        chadLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        MainMenu_Panel = new javax.swing.JPanel();
        playBttn = new javax.swing.JButton();
        highScoresBttn = new javax.swing.JButton();
        CreditsBttn = new javax.swing.JButton();
        malonePic = new javax.swing.JLabel();
        Credits_Panel = new javax.swing.JPanel();
        credLbl = new javax.swing.JLabel();
        ethanLbl = new javax.swing.JLabel();
        raulLbl = new javax.swing.JLabel();
        credBackBttn = new javax.swing.JButton();
        Game = new javax.swing.JPanel();
        skipButton = new javax.swing.JButton();
        buttonA = new javax.swing.JButton();
        buttonB = new javax.swing.JButton();
        buttonC = new javax.swing.JButton();
        buttonD = new javax.swing.JButton();
        buttonE = new javax.swing.JButton();
        buttonF = new javax.swing.JButton();
        buttonG = new javax.swing.JButton();
        buttonH = new javax.swing.JButton();
        buttonI = new javax.swing.JButton();
        buttonJ = new javax.swing.JButton();
        buttonK = new javax.swing.JButton();
        buttonL = new javax.swing.JButton();
        buttonM = new javax.swing.JButton();
        buttonN = new javax.swing.JButton();
        buttonO = new javax.swing.JButton();
        buttonP = new javax.swing.JButton();
        buttonQ = new javax.swing.JButton();
        buttonR = new javax.swing.JButton();
        buttonS = new javax.swing.JButton();
        buttonT = new javax.swing.JButton();
        buttonU = new javax.swing.JButton();
        buttonV = new javax.swing.JButton();
        buttonW = new javax.swing.JButton();
        buttonX = new javax.swing.JButton();
        buttonY = new javax.swing.JButton();
        buttonZ = new javax.swing.JButton();
        wordPanel = new javax.swing.JPanel();
        abstractPanel = new javax.swing.JPanel();
        absPaneA = new javax.swing.JScrollPane();
        absA = new javax.swing.JTextPane();
        absPaneS = new javax.swing.JScrollPane();
        absS = new javax.swing.JTextPane();
        absPaneB = new javax.swing.JScrollPane();
        absB = new javax.swing.JTextPane();
        absPaneT = new javax.swing.JScrollPane();
        absT = new javax.swing.JTextPane();
        absPaneR = new javax.swing.JScrollPane();
        absR = new javax.swing.JTextPane();
        absPaneA2 = new javax.swing.JScrollPane();
        absA2 = new javax.swing.JTextPane();
        absPaneC = new javax.swing.JScrollPane();
        absC = new javax.swing.JTextPane();
        absPaneT2 = new javax.swing.JScrollPane();
        absT2 = new javax.swing.JTextPane();
        cemeteryPanel = new javax.swing.JPanel();
        cemPaneC = new javax.swing.JScrollPane();
        cemC = new javax.swing.JTextPane();
        cemPaneE = new javax.swing.JScrollPane();
        cemE = new javax.swing.JTextPane();
        cemPaneM = new javax.swing.JScrollPane();
        cemM = new javax.swing.JTextPane();
        cemPaneE2 = new javax.swing.JScrollPane();
        cemE2 = new javax.swing.JTextPane();
        cemPaneT = new javax.swing.JScrollPane();
        cemT = new javax.swing.JTextPane();
        cemPaneE3 = new javax.swing.JScrollPane();
        cemE3 = new javax.swing.JTextPane();
        cemPaneR = new javax.swing.JScrollPane();
        cemR = new javax.swing.JTextPane();
        cemPaneY = new javax.swing.JScrollPane();
        cemY = new javax.swing.JTextPane();
        pharmacyPanel = new javax.swing.JPanel();
        pharPaneP = new javax.swing.JScrollPane();
        pharP = new javax.swing.JTextPane();
        pharPaneH = new javax.swing.JScrollPane();
        pharH = new javax.swing.JTextPane();
        pharPaneA = new javax.swing.JScrollPane();
        pharA = new javax.swing.JTextPane();
        pharPaneR = new javax.swing.JScrollPane();
        pharR = new javax.swing.JTextPane();
        pharPaneM = new javax.swing.JScrollPane();
        pharM = new javax.swing.JTextPane();
        pharPaneA2 = new javax.swing.JScrollPane();
        pharA2 = new javax.swing.JTextPane();
        pharPaneC = new javax.swing.JScrollPane();
        pharC = new javax.swing.JTextPane();
        pharPaneY = new javax.swing.JScrollPane();
        pharY = new javax.swing.JTextPane();
        nursePanel = new javax.swing.JPanel();
        nursePaneU = new javax.swing.JScrollPane();
        nurseU = new javax.swing.JTextPane();
        nursePaneR = new javax.swing.JScrollPane();
        nurseR = new javax.swing.JTextPane();
        nursePaneN = new javax.swing.JScrollPane();
        nurseN = new javax.swing.JTextPane();
        nursePaneS = new javax.swing.JScrollPane();
        nurseS = new javax.swing.JTextPane();
        nursePaneE = new javax.swing.JScrollPane();
        nurseE = new javax.swing.JTextPane();
        climbingPanel = new javax.swing.JPanel();
        climbPaneI = new javax.swing.JScrollPane();
        climbI = new javax.swing.JTextPane();
        climbPaneM = new javax.swing.JScrollPane();
        climbM = new javax.swing.JTextPane();
        climbPaneB = new javax.swing.JScrollPane();
        climbB = new javax.swing.JTextPane();
        climbPaneI2 = new javax.swing.JScrollPane();
        climbI2 = new javax.swing.JTextPane();
        climbPaneN = new javax.swing.JScrollPane();
        climbN = new javax.swing.JTextPane();
        climbPaneG = new javax.swing.JScrollPane();
        climbG = new javax.swing.JTextPane();
        climbPaneL = new javax.swing.JScrollPane();
        climbL = new javax.swing.JTextPane();
        climbPaneC = new javax.swing.JScrollPane();
        climbC = new javax.swing.JTextPane();
        hangman = new javax.swing.JPanel();
        hangbar = new javax.swing.JPanel();
        barPic = new javax.swing.JLabel();
        headPanel = new javax.swing.JPanel();
        headPic = new javax.swing.JLabel();
        bodyPanel = new javax.swing.JPanel();
        bodyPic = new javax.swing.JLabel();
        leftarmPanel = new javax.swing.JPanel();
        leftarmPic = new javax.swing.JLabel();
        rightarmPanel = new javax.swing.JPanel();
        rightarmPic = new javax.swing.JLabel();
        leftlegPanel = new javax.swing.JPanel();
        leftlegPic = new javax.swing.JLabel();
        rightlegPanel = new javax.swing.JPanel();
        rightlegPic = new javax.swing.JLabel();
        clockLabel1 = new ClockLabel();
        jLabel1 = new javax.swing.JLabel();
        circleGame = new javax.swing.JPanel();
        clockLabel2 = new ClockLabel();
        colorDisplay = new javax.swing.JLabel();
        blueButton = new javax.swing.JButton();
        redButton = new javax.swing.JButton();
        yellowButton = new javax.swing.JButton();
        purpleButton = new javax.swing.JButton();
        greenButton = new javax.swing.JButton();
        HighScore_Panel = new javax.swing.JPanel();
        highScrsLbl = new javax.swing.JLabel();
        backButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        HighScores = new javax.swing.JTable();
        endGamePanel = new javax.swing.JPanel();
        gameOverLabel = new javax.swing.JLabel();
        yourScoreLabel = new javax.swing.JLabel();
        gameScoreLabel = new javax.swing.JLabel();
        mainMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        parentPanel.setPreferredSize(new java.awt.Dimension(600, 400));
        parentPanel.setLayout(new java.awt.CardLayout());
        parentPanel.addKeyListener(new KeyPresser(parentPanel));

        chadLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 24)); // NOI18N
        chadLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chadLbl.setText("By: Beta Chads");

        titleLbl.setFont(new java.awt.Font("Yu Gothic", 1, 24)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Hangman Project v1.2");

        javax.swing.GroupLayout Startup_PanelLayout = new javax.swing.GroupLayout(Startup_Panel);
        Startup_Panel.setLayout(Startup_PanelLayout);
        Startup_PanelLayout.setHorizontalGroup(
            Startup_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Startup_PanelLayout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(chadLbl)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(Startup_PanelLayout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(titleLbl)
                .addContainerGap(171, Short.MAX_VALUE))
        );
        Startup_PanelLayout.setVerticalGroup(
            Startup_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Startup_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl)
                .addGap(236, 236, 236)
                .addComponent(chadLbl)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        parentPanel.add(Startup_Panel, "card2");

        MainMenu_Panel.setPreferredSize(new java.awt.Dimension(600, 400));

        playBttn.setText("Play");
        playBttn.setToolTipText("Press to Begin Playing");
        playBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBttnActionPerformed(evt);
            }
        });

        highScoresBttn.setText("High Scores");
        highScoresBttn.setToolTipText("Press to check out High Scores");
        highScoresBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highScoresBttnActionPerformed(evt);
            }
        });

        CreditsBttn.setText("Credits");
        CreditsBttn.setToolTipText("Press to meet the Creators!");
        CreditsBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreditsBttnActionPerformed(evt);
            }
        });

        malonePic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/258340013014212.png"))); // NOI18N

        javax.swing.GroupLayout MainMenu_PanelLayout = new javax.swing.GroupLayout(MainMenu_Panel);
        MainMenu_Panel.setLayout(MainMenu_PanelLayout);
        MainMenu_PanelLayout.setHorizontalGroup(
            MainMenu_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenu_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(malonePic, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MainMenu_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(highScoresBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreditsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        MainMenu_PanelLayout.setVerticalGroup(
            MainMenu_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenu_PanelLayout.createSequentialGroup()
                .addGroup(MainMenu_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainMenu_PanelLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(playBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(highScoresBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreditsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainMenu_PanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(malonePic, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        parentPanel.add(MainMenu_Panel, "card3");

        Credits_Panel.setPreferredSize(new java.awt.Dimension(600, 400));

        credLbl.setFont(new java.awt.Font("SimSun", 3, 36)); // NOI18N
        credLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        credLbl.setText("Credits");

        ethanLbl.setFont(new java.awt.Font("Sitka Subheading", 1, 24)); // NOI18N
        ethanLbl.setText("Ethan, Bronco #011923873 ");

        raulLbl.setFont(new java.awt.Font("Sitka Text", 1, 24)); // NOI18N
        raulLbl.setText("Raul, Bronco  #011993813");

        credBackBttn.setText("Back");
        credBackBttn.setToolTipText("Press to go back to the main menu");
        credBackBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credBackBttnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Credits_PanelLayout = new javax.swing.GroupLayout(Credits_Panel);
        Credits_Panel.setLayout(Credits_PanelLayout);
        Credits_PanelLayout.setHorizontalGroup(
            Credits_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Credits_PanelLayout.createSequentialGroup()
                .addGroup(Credits_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Credits_PanelLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(Credits_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Credits_PanelLayout.createSequentialGroup()
                                .addComponent(credLbl)
                                .addGap(96, 96, 96))
                            .addGroup(Credits_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ethanLbl)
                                .addComponent(raulLbl))))
                    .addGroup(Credits_PanelLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(credBackBttn)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        Credits_PanelLayout.setVerticalGroup(
            Credits_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Credits_PanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(credLbl)
                .addGap(36, 36, 36)
                .addComponent(raulLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ethanLbl)
                .addGap(65, 65, 65)
                .addComponent(credBackBttn)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        parentPanel.add(Credits_Panel, "card5");

        Game.setPreferredSize(new java.awt.Dimension(600, 400));

        skipButton.setText("Skip");
        skipButton.setToolTipText("Press to skip to the next game!");
        skipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipButtonActionPerformed(evt);
            }
        });

        buttonA.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonA.setText("A");
        buttonA.setToolTipText("press to select A");
        buttonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAActionPerformed(evt);
            }
        });

        buttonB.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonB.setText("B");
        buttonB.setToolTipText("press to select B");
        buttonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBActionPerformed(evt);
            }
        });

        buttonC.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonC.setText("C");
        buttonC.setToolTipText("press to select C");
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });

        buttonD.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonD.setText("D");
        buttonD.setToolTipText("press to select D");
        buttonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDActionPerformed(evt);
            }
        });

        buttonE.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonE.setText("E");
        buttonE.setToolTipText("press to select E");
        buttonE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEActionPerformed(evt);
            }
        });

        buttonF.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonF.setText("F");
        buttonF.setToolTipText("press to select F");
        buttonF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFActionPerformed(evt);
            }
        });

        buttonG.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonG.setText("G");
        buttonG.setToolTipText("press to select G");
        buttonG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGActionPerformed(evt);
            }
        });

        buttonH.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonH.setText("H");
        buttonH.setToolTipText("press to select H");
        buttonH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHActionPerformed(evt);
            }
        });

        buttonI.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonI.setText("I");
        buttonI.setToolTipText("press to select I");
        buttonI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIActionPerformed(evt);
            }
        });

        buttonJ.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonJ.setText("J");
        buttonJ.setToolTipText("press to select J");
        buttonJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonJActionPerformed(evt);
            }
        });

        buttonK.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonK.setText("K");
        buttonK.setToolTipText("press to select K");
        buttonK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKActionPerformed(evt);
            }
        });

        buttonL.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonL.setText("L");
        buttonL.setToolTipText("press to select L");
        buttonL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLActionPerformed(evt);
            }
        });

        buttonM.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonM.setText("M");
        buttonM.setToolTipText("press to select M");
        buttonM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMActionPerformed(evt);
            }
        });

        buttonN.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonN.setText("N");
        buttonN.setToolTipText("press to select N");
        buttonN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNActionPerformed(evt);
            }
        });

        buttonO.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonO.setText("O");
        buttonO.setToolTipText("press to select O");
        buttonO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOActionPerformed(evt);
            }
        });

        buttonP.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonP.setText("P");
        buttonP.setToolTipText("press to select P");
        buttonP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPActionPerformed(evt);
            }
        });

        buttonQ.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonQ.setText("Q");
        buttonQ.setToolTipText("press to select Q");
        buttonQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonQActionPerformed(evt);
            }
        });

        buttonR.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonR.setText("R");
        buttonR.setToolTipText("press to select R");
        buttonR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRActionPerformed(evt);
            }
        });

        buttonS.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonS.setText("S");
        buttonS.setToolTipText("press to select S");
        buttonS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSActionPerformed(evt);
            }
        });

        buttonT.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonT.setText("T");
        buttonT.setToolTipText("press to select T");
        buttonT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTActionPerformed(evt);
            }
        });

        buttonU.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonU.setText("U");
        buttonU.setToolTipText("press to select U");
        buttonU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUActionPerformed(evt);
            }
        });

        buttonV.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonV.setText("V");
        buttonV.setToolTipText("press to select V");
        buttonV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVActionPerformed(evt);
            }
        });

        buttonW.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonW.setText("W");
        buttonW.setToolTipText("press to select W");
        buttonW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWActionPerformed(evt);
            }
        });

        buttonX.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonX.setText("X");
        buttonX.setToolTipText("press to select X");
        buttonX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXActionPerformed(evt);
            }
        });

        buttonY.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonY.setText("Y");
        buttonY.setToolTipText("press to select Y");
        buttonY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonYActionPerformed(evt);
            }
        });

        buttonZ.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        buttonZ.setText("Z");
        buttonZ.setToolTipText("press to select Z");
        buttonZ.setPreferredSize(new java.awt.Dimension(39, 34));
        buttonZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZActionPerformed(evt);
            }
        });

        wordPanel.setPreferredSize(new java.awt.Dimension(370, 40));
        wordPanel.setRequestFocusEnabled(false);
        wordPanel.setLayout(new java.awt.CardLayout());

        abstractPanel.setPreferredSize(new java.awt.Dimension(370, 40));

        absPaneA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        absPaneA.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        absPaneA.setPreferredSize(new java.awt.Dimension(30, 40));

        absA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absA.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absA.setText("A");
        absPaneA.setViewportView(absA);

        absPaneS.setPreferredSize(new java.awt.Dimension(30, 40));

        absS.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absS.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absS.setText("S");
        absPaneS.setViewportView(absS);

        absPaneB.setPreferredSize(new java.awt.Dimension(30, 40));

        absB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absB.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absB.setText("B");
        absPaneB.setViewportView(absB);

        absPaneT.setPreferredSize(new java.awt.Dimension(30, 40));

        absT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absT.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absT.setText("T");
        absPaneT.setViewportView(absT);

        absPaneR.setPreferredSize(new java.awt.Dimension(30, 40));

        absR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absR.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absR.setText("R");
        absPaneR.setViewportView(absR);

        absPaneA2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        absPaneA2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        absPaneA2.setPreferredSize(new java.awt.Dimension(30, 40));

        absA2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absA2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absA2.setText("A");
        absPaneA2.setViewportView(absA2);

        absPaneC.setPreferredSize(new java.awt.Dimension(30, 40));

        absC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absC.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absC.setText("C");
        absPaneC.setViewportView(absC);

        absPaneT2.setPreferredSize(new java.awt.Dimension(30, 40));

        absT2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        absT2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        absT2.setText("T");
        absPaneT2.setViewportView(absT2);

        javax.swing.GroupLayout abstractPanelLayout = new javax.swing.GroupLayout(abstractPanel);
        abstractPanel.setLayout(abstractPanelLayout);
        abstractPanelLayout.setHorizontalGroup(
            abstractPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abstractPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(absPaneA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneT2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absPaneT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        abstractPanelLayout.setVerticalGroup(
            abstractPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abstractPanelLayout.createSequentialGroup()
                .addGroup(abstractPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(absPaneS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneT2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        wordPanel.add(abstractPanel, "card2");

        cemeteryPanel.setPreferredSize(new java.awt.Dimension(370, 40));

        cemPaneC.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneC.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneC.setPreferredSize(new java.awt.Dimension(30, 40));

        cemC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemC.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemC.setText("C");
        cemPaneC.setViewportView(cemC);

        cemPaneE.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneE.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneE.setPreferredSize(new java.awt.Dimension(30, 40));

        cemE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemE.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemE.setText("E");
        cemPaneE.setViewportView(cemE);

        cemPaneM.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneM.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneM.setPreferredSize(new java.awt.Dimension(30, 40));

        cemM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemM.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemM.setText("M");
        cemPaneM.setViewportView(cemM);

        cemPaneE2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneE2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneE2.setPreferredSize(new java.awt.Dimension(30, 40));

        cemE2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemE2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemE2.setText("E");
        cemPaneE2.setViewportView(cemE2);

        cemPaneT.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneT.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneT.setPreferredSize(new java.awt.Dimension(30, 40));

        cemT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemT.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemT.setText("T");
        cemPaneT.setViewportView(cemT);

        cemPaneE3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneE3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneE3.setPreferredSize(new java.awt.Dimension(30, 40));

        cemE3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemE3.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemE3.setText("E");
        cemPaneE3.setViewportView(cemE3);

        cemPaneR.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneR.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneR.setPreferredSize(new java.awt.Dimension(30, 40));

        cemR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemR.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemR.setText("R");
        cemPaneR.setViewportView(cemR);

        cemPaneY.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cemPaneY.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        cemPaneY.setPreferredSize(new java.awt.Dimension(30, 40));

        cemY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        cemY.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        cemY.setText("Y");
        cemPaneY.setViewportView(cemY);

        javax.swing.GroupLayout cemeteryPanelLayout = new javax.swing.GroupLayout(cemeteryPanel);
        cemeteryPanel.setLayout(cemeteryPanelLayout);
        cemeteryPanelLayout.setHorizontalGroup(
            cemeteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cemeteryPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cemPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneE2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneE3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cemPaneY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        cemeteryPanelLayout.setVerticalGroup(
            cemeteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cemeteryPanelLayout.createSequentialGroup()
                .addGroup(cemeteryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cemPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneE2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneE3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cemPaneY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        wordPanel.add(cemeteryPanel, "card3");

        pharmacyPanel.setPreferredSize(new java.awt.Dimension(370, 40));

        pharPaneP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneP.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneP.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneP.setPreferredSize(new java.awt.Dimension(30, 40));

        pharP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharP.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharP.setText("P");
        pharPaneP.setViewportView(pharP);

        pharPaneH.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneH.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneH.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneH.setPreferredSize(new java.awt.Dimension(30, 40));

        pharH.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharH.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharH.setText("H");
        pharPaneH.setViewportView(pharH);

        pharPaneA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneA.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneA.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneA.setPreferredSize(new java.awt.Dimension(30, 40));

        pharA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharA.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharA.setText("A");
        pharPaneA.setViewportView(pharA);

        pharPaneR.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneR.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneR.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneR.setPreferredSize(new java.awt.Dimension(30, 40));

        pharR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharR.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharR.setText("R");
        pharPaneR.setViewportView(pharR);

        pharPaneM.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneM.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneM.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneM.setPreferredSize(new java.awt.Dimension(30, 40));

        pharM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharM.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharM.setText("M");
        pharPaneM.setViewportView(pharM);

        pharPaneA2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneA2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneA2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneA2.setPreferredSize(new java.awt.Dimension(30, 40));

        pharA2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharA2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharA2.setText("A");
        pharPaneA2.setViewportView(pharA2);

        pharPaneC.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneC.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneC.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneC.setPreferredSize(new java.awt.Dimension(30, 40));

        pharC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharC.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharC.setText("C");
        pharPaneC.setViewportView(pharC);

        pharPaneY.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pharPaneY.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pharPaneY.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharPaneY.setPreferredSize(new java.awt.Dimension(30, 40));

        pharY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pharY.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        pharY.setText("Y");
        pharPaneY.setViewportView(pharY);

        javax.swing.GroupLayout pharmacyPanelLayout = new javax.swing.GroupLayout(pharmacyPanel);
        pharmacyPanel.setLayout(pharmacyPanelLayout);
        pharmacyPanelLayout.setHorizontalGroup(
            pharmacyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pharmacyPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(pharPaneP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneR, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pharPaneY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pharmacyPanelLayout.setVerticalGroup(
            pharmacyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pharmacyPanelLayout.createSequentialGroup()
                .addGroup(pharmacyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pharPaneP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pharPaneY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        wordPanel.add(pharmacyPanel, "card5");

        nursePanel.setPreferredSize(new java.awt.Dimension(370, 40));

        nursePaneU.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        nursePaneU.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        nursePaneU.setPreferredSize(new java.awt.Dimension(30, 40));

        nurseU.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        nurseU.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        nurseU.setText("U");
        nurseU.setToolTipText("");
        nursePaneU.setViewportView(nurseU);

        nursePaneR.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        nursePaneR.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        nursePaneR.setPreferredSize(new java.awt.Dimension(30, 40));

        nurseR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        nurseR.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        nurseR.setText("R");
        nursePaneR.setViewportView(nurseR);

        nursePaneN.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        nursePaneN.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        nursePaneN.setPreferredSize(new java.awt.Dimension(30, 40));

        nurseN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        nurseN.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        nurseN.setText("N");
        nursePaneN.setViewportView(nurseN);

        nursePaneS.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        nursePaneS.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        nursePaneS.setPreferredSize(new java.awt.Dimension(30, 40));

        nurseS.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        nurseS.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        nurseS.setText("S");
        nursePaneS.setViewportView(nurseS);

        nursePaneE.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        nursePaneE.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        nursePaneE.setPreferredSize(new java.awt.Dimension(30, 40));

        nurseE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        nurseE.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        nurseE.setText("E");
        nursePaneE.setViewportView(nurseE);

        javax.swing.GroupLayout nursePanelLayout = new javax.swing.GroupLayout(nursePanel);
        nursePanel.setLayout(nursePanelLayout);
        nursePanelLayout.setHorizontalGroup(
            nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nursePanelLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(nursePaneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nursePaneU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nursePaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nursePaneS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nursePaneE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        nursePanelLayout.setVerticalGroup(
            nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nursePanelLayout.createSequentialGroup()
                .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nursePaneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nursePaneU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nursePaneR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nursePaneS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nursePaneE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        wordPanel.add(nursePanel, "card5");

        climbingPanel.setPreferredSize(new java.awt.Dimension(370, 40));

        climbPaneI.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneI.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneI.setPreferredSize(new java.awt.Dimension(30, 40));

        climbI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbI.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbI.setText("I");
        climbPaneI.setViewportView(climbI);

        climbPaneM.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneM.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneM.setPreferredSize(new java.awt.Dimension(30, 40));

        climbM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbM.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbM.setText("M");
        climbPaneM.setViewportView(climbM);

        climbPaneB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneB.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneB.setPreferredSize(new java.awt.Dimension(30, 40));

        climbB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbB.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbB.setText("B");
        climbPaneB.setViewportView(climbB);

        climbPaneI2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneI2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneI2.setPreferredSize(new java.awt.Dimension(30, 40));

        climbI2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbI2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbI2.setText("I");
        climbPaneI2.setViewportView(climbI2);

        climbPaneN.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneN.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneN.setPreferredSize(new java.awt.Dimension(30, 40));

        climbN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbN.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbN.setText("N");
        climbPaneN.setViewportView(climbN);

        climbPaneG.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneG.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneG.setPreferredSize(new java.awt.Dimension(30, 40));

        climbG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbG.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbG.setText("G");
        climbPaneG.setViewportView(climbG);

        climbPaneL.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneL.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneL.setPreferredSize(new java.awt.Dimension(30, 40));

        climbL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbL.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbL.setText("L");
        climbPaneL.setViewportView(climbL);

        climbPaneC.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        climbPaneC.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        climbPaneC.setPreferredSize(new java.awt.Dimension(30, 40));

        climbC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        climbC.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        climbC.setText("C");
        climbPaneC.setViewportView(climbC);

        javax.swing.GroupLayout climbingPanelLayout = new javax.swing.GroupLayout(climbingPanel);
        climbingPanel.setLayout(climbingPanelLayout);
        climbingPanelLayout.setHorizontalGroup(
            climbingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(climbingPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(climbPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneI2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(climbPaneG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        climbingPanelLayout.setVerticalGroup(
            climbingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(climbingPanelLayout.createSequentialGroup()
                .addGroup(climbingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(climbPaneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneI2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneI, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(climbPaneC, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        wordPanel.add(climbingPanel, "card4");

        hangman.setLayout(new java.awt.CardLayout());

        barPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hangbar.png"))); // NOI18N
        barPic.setText("jLabel2");

        javax.swing.GroupLayout hangbarLayout = new javax.swing.GroupLayout(hangbar);
        hangbar.setLayout(hangbarLayout);
        hangbarLayout.setHorizontalGroup(
            hangbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(hangbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hangbarLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        hangbarLayout.setVerticalGroup(
            hangbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(hangbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hangbarLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(hangbar, "card2");

        headPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/headreal.png"))); // NOI18N
        headPic.setText("jLabel2");

        javax.swing.GroupLayout headPanelLayout = new javax.swing.GroupLayout(headPanel);
        headPanel.setLayout(headPanelLayout);
        headPanelLayout.setHorizontalGroup(
            headPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(headPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        headPanelLayout.setVerticalGroup(
            headPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(headPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(headPanel, "card2");

        bodyPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bodyreal.png"))); // NOI18N
        bodyPic.setText("jLabel2");

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bodyPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bodyPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(bodyPanel, "card2");

        leftarmPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/leftarmreal.png"))); // NOI18N
        leftarmPic.setText("jLabel2");

        javax.swing.GroupLayout leftarmPanelLayout = new javax.swing.GroupLayout(leftarmPanel);
        leftarmPanel.setLayout(leftarmPanelLayout);
        leftarmPanelLayout.setHorizontalGroup(
            leftarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(leftarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftarmPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftarmPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        leftarmPanelLayout.setVerticalGroup(
            leftarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(leftarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftarmPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftarmPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(leftarmPanel, "card2");

        rightarmPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rightarmreal.png"))); // NOI18N
        rightarmPic.setText("jLabel2");

        javax.swing.GroupLayout rightarmPanelLayout = new javax.swing.GroupLayout(rightarmPanel);
        rightarmPanel.setLayout(rightarmPanelLayout);
        rightarmPanelLayout.setHorizontalGroup(
            rightarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(rightarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightarmPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightarmPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        rightarmPanelLayout.setVerticalGroup(
            rightarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(rightarmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightarmPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightarmPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(rightarmPanel, "card2");

        leftlegPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/leftlegreal.png"))); // NOI18N
        leftlegPic.setText("jLabel2");

        javax.swing.GroupLayout leftlegPanelLayout = new javax.swing.GroupLayout(leftlegPanel);
        leftlegPanel.setLayout(leftlegPanelLayout);
        leftlegPanelLayout.setHorizontalGroup(
            leftlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(leftlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftlegPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftlegPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        leftlegPanelLayout.setVerticalGroup(
            leftlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(leftlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftlegPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftlegPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(leftlegPanel, "card2");

        rightlegPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rightlegreal.png"))); // NOI18N
        rightlegPic.setText("jLabel2");

        javax.swing.GroupLayout rightlegPanelLayout = new javax.swing.GroupLayout(rightlegPanel);
        rightlegPanel.setLayout(rightlegPanelLayout);
        rightlegPanelLayout.setHorizontalGroup(
            rightlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(rightlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightlegPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightlegPic, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        rightlegPanelLayout.setVerticalGroup(
            rightlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(rightlegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightlegPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightlegPic)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        hangman.add(rightlegPanel, "card2");

        clockLabel1.setText("jLabel1");

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setText("Hangman");

        javax.swing.GroupLayout GameLayout = new javax.swing.GroupLayout(Game);
        Game.setLayout(GameLayout);
        GameLayout.setHorizontalGroup(
            GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameLayout.createSequentialGroup()
                .addComponent(buttonN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonQ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonU)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(GameLayout.createSequentialGroup()
                .addComponent(buttonA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GameLayout.createSequentialGroup()
                        .addComponent(wordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                        .addGap(133, 133, 133))
                    .addGroup(GameLayout.createSequentialGroup()
                        .addComponent(buttonD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonJ)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonM))))
            .addGroup(GameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hangman, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(218, 218, 218))
                    .addGroup(GameLayout.createSequentialGroup()
                        .addComponent(skipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clockLabel1)
                        .addContainerGap())))
        );
        GameLayout.setVerticalGroup(
            GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameLayout.createSequentialGroup()
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clockLabel1)
                    .addComponent(skipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hangman, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(wordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonF, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonE, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonD, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonC, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonB, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonG, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonH, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonI, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonJ, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonK, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonL, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonM, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonT, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonS, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonR, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonQ, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonO, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonN, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonU, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonV, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonW, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonX, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonY, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );

        parentPanel.add(Game, "card6");

        circleGame.setPreferredSize(new java.awt.Dimension(600, 400));

        clockLabel2.setText("jLabel2");

        colorDisplay.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        colorDisplay.setText("Color");

        blueButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blueCircle.png"))); // NOI18N
        blueButton.setToolTipText("Press to select Blue");
        blueButton.setPreferredSize(new java.awt.Dimension(80, 80));
        blueButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                blueButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                blueButtonMouseExited(evt);
            }
        });
        blueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueButtonActionPerformed(evt);
            }
        });

        redButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/redCircle.png"))); // NOI18N
        redButton.setToolTipText("Press to select red");
        redButton.setPreferredSize(new java.awt.Dimension(80, 80));
        redButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                redButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                redButtonMouseExited(evt);
            }
        });
        redButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redButtonActionPerformed(evt);
            }
        });

        yellowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yellowCircle.png"))); // NOI18N
        yellowButton.setToolTipText("Press to select Yellow");
        yellowButton.setPreferredSize(new java.awt.Dimension(80, 80));
        yellowButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yellowButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                yellowButtonMouseExited(evt);
            }
        });
        yellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowButtonActionPerformed(evt);
            }
        });

        purpleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/purpleCircle.png"))); // NOI18N
        purpleButton.setToolTipText("Press to select Purple");
        purpleButton.setPreferredSize(new java.awt.Dimension(80, 80));
        purpleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                purpleButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                purpleButtonMouseExited(evt);
            }
        });
        purpleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purpleButtonActionPerformed(evt);
            }
        });

        greenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/greenCircle.png"))); // NOI18N
        greenButton.setPreferredSize(new java.awt.Dimension(80, 80));
        greenButton.setToolTipText("Press to select Green");
        greenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                greenButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                greenButtonMouseExited(evt);
            }
        });
        greenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout circleGameLayout = new javax.swing.GroupLayout(circleGame);
        circleGame.setLayout(circleGameLayout);
        circleGameLayout.setHorizontalGroup(
            circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(circleGameLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(circleGameLayout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(colorDisplay)
                        .addGap(249, 286, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, circleGameLayout.createSequentialGroup()
                        .addComponent(clockLabel2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, circleGameLayout.createSequentialGroup()
                        .addGroup(circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(circleGameLayout.createSequentialGroup()
                                .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(redButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(purpleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(circleGameLayout.createSequentialGroup()
                                .addComponent(blueButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(greenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(83, 83, 83))))
        );
        circleGameLayout.setVerticalGroup(
            circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(circleGameLayout.createSequentialGroup()
                .addComponent(clockLabel2)
                .addGap(5, 5, 5)
                .addComponent(colorDisplay)
                .addGap(67, 67, 67)
                .addGroup(circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blueButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(circleGameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, circleGameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(circleGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(purpleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66))))
        );

        parentPanel.add(circleGame, "card7");

        HighScore_Panel.setPreferredSize(new java.awt.Dimension(600, 400));

        highScrsLbl.setFont(new java.awt.Font("Gabriola", 1, 48)); // NOI18N
        highScrsLbl.setText("HIGHSCORES");

        backButton1.setText("Back");
        backButton1.setToolTipText("Press to return to main menu");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });

        HighScores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(HighScores);

        javax.swing.GroupLayout HighScore_PanelLayout = new javax.swing.GroupLayout(HighScore_Panel);
        HighScore_Panel.setLayout(HighScore_PanelLayout);
        HighScore_PanelLayout.setHorizontalGroup(
            HighScore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HighScore_PanelLayout.createSequentialGroup()
                .addGroup(HighScore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HighScore_PanelLayout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(highScrsLbl))
                    .addGroup(HighScore_PanelLayout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(backButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HighScore_PanelLayout.createSequentialGroup()
                .addGap(0, 79, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        HighScore_PanelLayout.setVerticalGroup(
            HighScore_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HighScore_PanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(highScrsLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(backButton1)
                .addContainerGap())
        );

        parentPanel.add(HighScore_Panel, "card4");

        endGamePanel.setPreferredSize(new java.awt.Dimension(600, 400));

        gameOverLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        gameOverLabel.setText("Game Over");

        yourScoreLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        yourScoreLabel.setText("Your Score:");

        gameScoreLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N

        mainMenuButton.setText("Main Menu");
        mainMenuButton.setToolTipText("Press to return to the main menu");
        mainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout endGamePanelLayout = new javax.swing.GroupLayout(endGamePanel);
        endGamePanel.setLayout(endGamePanelLayout);
        endGamePanelLayout.setHorizontalGroup(
            endGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, endGamePanelLayout.createSequentialGroup()
                .addContainerGap(254, Short.MAX_VALUE)
                .addGroup(endGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainMenuButton)
                    .addComponent(yourScoreLabel)
                    .addComponent(gameOverLabel)
                    .addComponent(gameScoreLabel))
                .addGap(248, 248, 248))
        );
        endGamePanelLayout.setVerticalGroup(
            endGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endGamePanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(gameOverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(yourScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(mainMenuButton)
                .addGap(46, 46, 46))
        );

        parentPanel.add(endGamePanel, "card8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(parentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(parentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void playBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBttnActionPerformed
        //reset hangman buttons and win conditions
        resetButtons();
        gameScore = 100;
        absCount = 0;
        cemCount = 0;
        pharCount = 0;
        nurseCount = 0;
        climbCount = 0;
        circleCount = 0;
        
        parentPanel.removeAll();
        parentPanel.add(Game);
        parentPanel.repaint();
        parentPanel.revalidate();
        
        hangman.removeAll();
        hangman.add(hangbar);
        hangman.repaint();
        hangman.revalidate();
        //random number generator set to 5 to randomize the word panel that displays
        wordNum = rand.nextInt(5) + 1;
        
        //switch statement to display a randomly selected word panel
        switch(wordNum)
        {
            case 1:
                hideLettersAbs();
                wordPanel.removeAll();
                wordPanel.add(abstractPanel);
                wordPanel.repaint();
                wordPanel.revalidate();
                break;
            case 2:
                hideLettersCem();
                wordPanel.removeAll();
                wordPanel.add(cemeteryPanel);
                wordPanel.repaint();
                wordPanel.revalidate();
                break;
            case 3:
                hideLettersPhar();
                wordPanel.removeAll();
                wordPanel.add(pharmacyPanel);
                wordPanel.repaint();
                wordPanel.revalidate();
                break;
            case 4:
                hideLettersNurse();
                wordPanel.removeAll();
                wordPanel.add(nursePanel);
                wordPanel.repaint();
                wordPanel.revalidate();
                break;
            case 5:
                hideLettersClimb();
                wordPanel.removeAll();
                wordPanel.add(climbingPanel);
                wordPanel.repaint();
                wordPanel.revalidate();
                break;
        }
        
        setTextColor();
        randomizeButtons();
    }//GEN-LAST:event_playBttnActionPerformed

    public void stop()
    {
        System.exit(0);
    }
    private void highScoresBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highScoresBttnActionPerformed
        //button linked to HighScores
        //DELETING OLD TABLE BEFORE WRITING TO NEW ONE TO AVOID APPENDING
        HighScores.setModel(new DefaultTableModel(null, new String[]{"Name", "Score"}));
        OGhighScoreCheck();
        try {
            writeHighScores();
        } catch (IOException ex) {
            Logger.getLogger(Hangman.class.getName()).log(Level.SEVERE, null, ex);
        }
        parentPanel.removeAll();
        parentPanel.add(HighScore_Panel);
        parentPanel.repaint();
        parentPanel.revalidate();
        
        //BLOCK OF CODE FOR READING FROM TEXT FILE AND DISPLAYING TO TABLE 
        String filePath = "src\\highScores.TXT";
        File file = new File(filePath);
        
        try
        {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = "Name Score".trim();
            String[] columnsName = firstLine.split(" ");
            DefaultTableModel model = (DefaultTableModel) HighScores.getModel();
            model.setColumnIdentifiers(columnsName);
            Object[] tableLines = br.lines().toArray();
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split(" ");
                model.addRow(dataRow);
            }
        }
        catch(Exception ex)
        {
            
        }
        
        
    }//GEN-LAST:event_highScoresBttnActionPerformed

    
    private void CreditsBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreditsBttnActionPerformed
        //button linked to credits
        parentPanel.removeAll();
        parentPanel.add(Credits_Panel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_CreditsBttnActionPerformed

    private void credBackBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credBackBttnActionPerformed
        //button linked to main menu
        parentPanel.removeAll();
        parentPanel.add(MainMenu_Panel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_credBackBttnActionPerformed

    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        //button linked to main menu
        parentPanel.removeAll();
        parentPanel.add(circleGame);
        parentPanel.repaint();
        parentPanel.revalidate();
        gameScore = 0;
    }//GEN-LAST:event_skipButtonActionPerformed

    private void buttonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAActionPerformed
        // TODO add your handling code here:
        if(wordNum == 1)
        {
            absA.setVisible(true);
            absA2.setVisible(true);
            absCount += 2;
        }
        else if(wordNum == 3)
        {
            pharA.setVisible(true);
            pharA2.setVisible(true);
            pharCount += 2;
        }
        else
            gameScore -= 10;
        buttonA.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonAActionPerformed

    private void buttonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBActionPerformed
        // TODO add your handling code here:
        if(wordNum == 1)
        {
            absB.setVisible(true);
            absCount++;
        }
        else if(wordNum == 5)
        {
            climbB.setVisible(true);
            climbCount++;
        }
        else
            gameScore -= 10;
        buttonB.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonBActionPerformed

    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed
        // TODO add your handling code here:
        if(wordNum == 1)
        {
            absC.setVisible(true);
            absCount++;
        }
        else if(wordNum == 2)
        {
            cemC.setVisible(true);
            cemCount++;
        }
        else if(wordNum == 3)
        {
            pharC.setVisible(true);
            pharCount++;
        }
        else if(wordNum == 5)
        {
            climbC.setVisible(true);
            climbCount++;
        }
        else
            gameScore -= 10;
        buttonC.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonCActionPerformed

    private void buttonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonD.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonDActionPerformed

    private void buttonEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEActionPerformed
        // TODO add your handling code here:
        if(wordNum == 2)
        {
            cemE.setVisible(true);
            cemE2.setVisible(true);
            cemE3.setVisible(true);
            cemCount += 3;
        }
        else if(wordNum == 4)
        {
            nurseE.setVisible(true);
            nurseCount++;
        }
        else
            gameScore -= 10;
        buttonE.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonEActionPerformed

    
    private void buttonFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonF.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonFActionPerformed

    private void buttonGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGActionPerformed
        // TODO add your handling code here:
        if(wordNum == 5)
        {
            climbG.setVisible(true);
            climbCount++;
        }
        else
            gameScore -= 10;
        buttonG.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonGActionPerformed

    private void buttonHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHActionPerformed
        // TODO add your handling code here:
        if(wordNum == 3)
        {
            pharH.setVisible(true);
            pharCount++;
        }
        else
            gameScore -= 10;
        buttonH.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonHActionPerformed

    private void buttonIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIActionPerformed
        // TODO add your handling code here:
        if(wordNum == 5)
        {
            climbI.setVisible(true);
            climbI2.setVisible(true);
            climbCount += 2;
        }
        else
            gameScore -= 10;
        buttonI.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonIActionPerformed

    private void buttonJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonJActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonJ.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonJActionPerformed

    private void buttonKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonK.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonKActionPerformed

    private void buttonLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLActionPerformed
        // TODO add your handling code here:
        if(wordNum == 5)
        {
            climbL.setVisible(true);
            climbCount++;
        }
        else
            gameScore -= 10;
        buttonL.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonLActionPerformed

    private void buttonMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMActionPerformed
        // TODO add your handling code here:
        if(wordNum == 2)
        {
            cemM.setVisible(true);
            cemCount++;
        }
        else if(wordNum == 3)
        {
            pharM.setVisible(true);
            pharCount++;
        }
        else if(wordNum == 5)
        {
            climbM.setVisible(true);
            climbCount++;
        }
        else
            gameScore -= 10;
        buttonM.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonMActionPerformed

    private void buttonNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNActionPerformed
        // TODO add your handling code here:
        if(wordNum == 4)
        {
            nurseN.setVisible(true);
            nurseCount++;
        }
        else if(wordNum == 5)
        {
            climbN.setVisible(true);
            climbCount++;
        }
        else
            gameScore -= 10;
        buttonN.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonNActionPerformed

    private void buttonOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonO.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonOActionPerformed

    private void buttonPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPActionPerformed
        // TODO add your handling code here:
        if(wordNum == 3)
        {
            pharP.setVisible(true);
            pharCount++;
        }
        else
            gameScore -= 10;
        buttonP.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonPActionPerformed

    private void buttonQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonQActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonQ.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonQActionPerformed

    private void buttonRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRActionPerformed
        // TODO add your handling code here:
        if(wordNum == 1)
        {
            absR.setVisible(true);
            absCount++;
        }
        else if(wordNum == 2)
        {
            cemR.setVisible(true);
            cemCount++;
        }
        else if(wordNum == 3)
        {
            pharR.setVisible(true);
            pharCount++;
        }
        else if(wordNum == 4)
        {
            nurseR.setVisible(true);
            nurseCount++;
        }
        else 
            gameScore -= 10;
        buttonR.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonRActionPerformed

    private void buttonSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSActionPerformed
        // TODO add your handling code here:
        if(wordNum == 1)
        {
            absS.setVisible(true);
            absCount++;
        }
        else if(wordNum == 4)
        {
            nurseS.setVisible(true);
            nurseCount++;
        }
        else
            gameScore -= 10;    
        buttonS.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonSActionPerformed

    private void buttonTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTActionPerformed
        // TODO add your handling code here:
        if(wordNum == 1)
        {
            absT.setVisible(true);
            absT2.setVisible(true);
            absCount += 2;
        }
        else if(wordNum == 2)
        {
            cemT.setVisible(true);
            cemCount++;
        }
        else
            gameScore -= 10;    
        buttonT.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonTActionPerformed

    private void buttonUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUActionPerformed
        // TODO add your handling code here:
        if(wordNum == 4)
        {
            nurseU.setVisible(true);
            nurseCount++;
        }
        else
            gameScore -= 10;
        buttonU.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonUActionPerformed

    private void buttonVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonV.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonVActionPerformed

    private void buttonWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonW.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonWActionPerformed

    private void buttonXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonX.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonXActionPerformed

    private void buttonYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonYActionPerformed
        // TODO add your handling code here:
        if(wordNum == 2)
        {
            cemY.setVisible(true);
            cemCount++;
        }
        else if(wordNum == 3)
        {
            pharY.setVisible(true);
            pharCount++;
        }
        else
            gameScore -= 10;
        buttonY.setEnabled(false);
        checkHanged();
        drawHanged();
    }//GEN-LAST:event_buttonYActionPerformed

    private void buttonZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZActionPerformed
        // TODO add your handling code here:
        gameScore -= 10;
        buttonZ.setEnabled(false);
        checkHanged();
        drawHanged();
        
    }//GEN-LAST:event_buttonZActionPerformed

    private void mainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuButtonActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(MainMenu_Panel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_mainMenuButtonActionPerformed

    private void redButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redButtonActionPerformed
        // TODO add your handling code here:
        if(colorNum == 2)
            gameScore += 100;
        setTextColor();
        circleCount++;
        checkCircle();
    }//GEN-LAST:event_redButtonActionPerformed

    private void blueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueButtonActionPerformed
        // TODO add your handling code here:
        if(colorNum == 1)
            gameScore += 100;
        setTextColor();
        circleCount++;
        checkCircle();    
    }//GEN-LAST:event_blueButtonActionPerformed

    private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
        // TODO add your handling code here:
        //button linked to main menu
        parentPanel.removeAll();
        parentPanel.add(MainMenu_Panel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_backButton1ActionPerformed

    private void yellowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowButtonActionPerformed
        // TODO add your handling code here:
        if(colorNum == 3)
            gameScore += 100;
        setTextColor();
        circleCount++;
        checkCircle();
    }//GEN-LAST:event_yellowButtonActionPerformed

    private void purpleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purpleButtonActionPerformed
        // TODO add your handling code here:
        if(colorNum == 4)
            gameScore += 100;
        setTextColor();
        circleCount++;
        checkCircle();
    }//GEN-LAST:event_purpleButtonActionPerformed

    private void greenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenButtonActionPerformed
        // TODO add your handling code here:
        if(colorNum == 5)
            gameScore += 100;
        setTextColor();
        circleCount++;
        checkCircle();
    }//GEN-LAST:event_greenButtonActionPerformed

    private void blueButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueButtonMouseEntered
        // TODO add your handling code here:
        blueButton.setIcon(new ImageIcon(getClass().getResource("/blueCircle2.png")));
    }//GEN-LAST:event_blueButtonMouseEntered

    private void blueButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueButtonMouseExited
        // TODO add your handling code here:
        blueButton.setIcon(new ImageIcon(getClass().getResource("/blueCircle.png")));
    }//GEN-LAST:event_blueButtonMouseExited

    private void yellowButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yellowButtonMouseEntered
        // TODO add your handling code here:
        yellowButton.setIcon(new ImageIcon(getClass().getResource("/yellowCircle2.png")));
    }//GEN-LAST:event_yellowButtonMouseEntered

    private void yellowButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yellowButtonMouseExited
        // TODO add your handling code here:
        yellowButton.setIcon(new ImageIcon(getClass().getResource("/yellowCircle.png")));
    }//GEN-LAST:event_yellowButtonMouseExited

    private void redButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redButtonMouseEntered
        // TODO add your handling code here:
        redButton.setIcon(new ImageIcon(getClass().getResource("/redCircle2.png")));
    }//GEN-LAST:event_redButtonMouseEntered

    private void redButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redButtonMouseExited
        // TODO add your handling code here:
        redButton.setIcon(new ImageIcon(getClass().getResource("/redCircle.png")));
    }//GEN-LAST:event_redButtonMouseExited

    private void greenButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenButtonMouseEntered
        // TODO add your handling code here:
        greenButton.setIcon(new ImageIcon(getClass().getResource("/greenCircle2.png")));
    }//GEN-LAST:event_greenButtonMouseEntered

    private void greenButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenButtonMouseExited
        // TODO add your handling code here:
        greenButton.setIcon(new ImageIcon(getClass().getResource("/greenCircle.png")));
    }//GEN-LAST:event_greenButtonMouseExited

    private void purpleButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purpleButtonMouseEntered
        // TODO add your handling code here:
        purpleButton.setIcon(new ImageIcon(getClass().getResource("/purpleCircle2.png")));
    }//GEN-LAST:event_purpleButtonMouseEntered

    private void purpleButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purpleButtonMouseExited
        // TODO add your handling code here:
        purpleButton.setIcon(new ImageIcon(getClass().getResource("/purpleCircle.png")));
    }//GEN-LAST:event_purpleButtonMouseExited

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_F1)
        {
            F1Pane.showMessageDialog(null,"Ethan Bangar-Martinez: 011923873 \n Raul Pabian: 011993813 \n CS2450 Semester Project \n Fall 2019","Information",JOptionPane.PLAIN_MESSAGE);
        }
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_formKeyPressed
    
    //splash screen action listener
    public void actionPerformed(ActionEvent e)
    {
        parentPanel.removeAll();
        parentPanel.add(MainMenu_Panel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }
    //Creating HideLetter methods for each word to unhide late
    private void hideLettersAbs()
    {
        absA.setVisible(false);
        absS.setVisible(false);
        absB.setVisible(false);
        absT.setVisible(false);
        absR.setVisible(false);
        absA2.setVisible(false);
        absC.setVisible(false);
        absT2.setVisible(false);
    }
    
    private void hideLettersCem()
    {
        cemC.setVisible(false);
        cemE.setVisible(false);
        cemM.setVisible(false);
        cemE2.setVisible(false);
        cemT.setVisible(false);
        cemE3.setVisible(false);
        cemR.setVisible(false);
        cemY.setVisible(false);
    }
    
    private void hideLettersNurse()
    {
        nurseN.setVisible(false);
        nurseU.setVisible(false);
        nurseR.setVisible(false);
        nurseS.setVisible(false);
        nurseE.setVisible(false);
    }
    
    private void hideLettersPhar()
    {
        pharP.setVisible(false);
        pharH.setVisible(false);
        pharA.setVisible(false);
        pharR.setVisible(false);
        pharM.setVisible(false);
        pharA2.setVisible(false);
        pharC.setVisible(false);
        pharY.setVisible(false);  
    }
    
    private void hideLettersClimb()
    {
        climbC.setVisible(false);
        climbL.setVisible(false);
        climbI.setVisible(false);
        climbM.setVisible(false);
        climbB.setVisible(false);
        climbI2.setVisible(false);
        climbN.setVisible(false);
        climbG.setVisible(false);
    }
    
    private void resetButtons()
    {
        buttonA.setEnabled(true);
        buttonB.setEnabled(true);
        buttonC.setEnabled(true);
        buttonD.setEnabled(true);
        buttonE.setEnabled(true);
        buttonF.setEnabled(true);
        buttonG.setEnabled(true);
        buttonH.setEnabled(true);
        buttonI.setEnabled(true);
        buttonJ.setEnabled(true);
        buttonK.setEnabled(true);
        buttonL.setEnabled(true);
        buttonM.setEnabled(true);
        buttonN.setEnabled(true);
        buttonO.setEnabled(true);
        buttonP.setEnabled(true);
        buttonQ.setEnabled(true);
        buttonR.setEnabled(true);
        buttonS.setEnabled(true);
        buttonT.setEnabled(true);
        buttonU.setEnabled(true);
        buttonV.setEnabled(true);
        buttonW.setEnabled(true);
        buttonX.setEnabled(true);
        buttonY.setEnabled(true);
        buttonZ.setEnabled(true);
    }
    
    private void checkHanged()
    {
        if(absCount == 8 || cemCount == 8 || pharCount == 8 ||
                nurseCount == 5 || climbCount == 8 || gameScore < 40)
            {
                if(gameScore < 40)
                {
                    gameScore += 10;
                }
                parentPanel.removeAll();
                parentPanel.add(circleGame);
                parentPanel.repaint();
                parentPanel.revalidate();
                
            }
    }
    
    private void drawHanged()
    {
        switch(gameScore)
        {
            case 40:
                hangman.removeAll();
                hangman.add(rightlegPanel);
                hangman.repaint();
                hangman.revalidate();
                break;
            case 50:
                hangman.removeAll();
                hangman.add(leftlegPanel);
                hangman.repaint();
                hangman.revalidate();
                break;
            case 60:
                hangman.removeAll();
                hangman.add(rightarmPanel);
                hangman.repaint();
                hangman.revalidate();
                break;
            case 70:
                hangman.removeAll();
                hangman.add(leftarmPanel);
                hangman.repaint();
                hangman.revalidate();
                break;
            case 80:
                hangman.removeAll();
                hangman.add(bodyPanel);
                hangman.repaint();
                hangman.revalidate();
                break;
            case 90:
                hangman.removeAll();
                hangman.add(headPanel);
                hangman.repaint();
                hangman.revalidate();
                break;
        }
    }
    
    public void setTextColor()
    {
        colorNum = rand.nextInt(5) + 1;
        switch(colorNum)
        {
            case 1:
                colorDisplay.setForeground(Color.BLUE);
                break;
            case 2:
                colorDisplay.setForeground(Color.RED);
                break;
            case 3:
                colorDisplay.setForeground(Color.YELLOW);
                break;
            case 4:
                colorDisplay.setForeground(Color.magenta);
                break;
            case 5:
                colorDisplay.setForeground(Color.GREEN);
                break;
        }
        
        colorWordNum = rand.nextInt(5);
        colorDisplay.setText(colorWords[colorWordNum]);
    }
    
    public void checkCircle()
    {
        if(circleCount == 5)
        {
            String scoreString = String.valueOf(gameScore);
            gameScoreLabel.setText(scoreString);
            
            
            
            parentPanel.removeAll();
            parentPanel.add(endGamePanel);
            parentPanel.repaint();
            parentPanel.revalidate();
            if(gameScore > Score5)
            {
                String response;
                response = JOptionPane.showInputDialog("Congratulations! You made it on the High Score board!\nWhat do you want to save as your High Score Name:");
                highScoreCheck(response,gameScore);
            }
        }
        
        randomizeButtons();
    }
    
    public void randomizeButtons()
    {
        JButton[] circleButtons = {blueButton, redButton, yellowButton,
                                   purpleButton, greenButton};
        int buttonHeight = 80;
        int buttonWidth = 80;
        
        circleGame.remove(blueButton);
        circleGame.remove(redButton);
        circleGame.remove(yellowButton);
        circleGame.remove(purpleButton);
        circleGame.remove(greenButton);
        
        for(int i = 0; i < colorWords.length; i++)
        {
            boolean intersects = true;
            
            int xBound = rand.nextInt(new Hangman().getContentPane().getWidth() - buttonWidth);
            int yBound = rand.nextInt(new Hangman().getContentPane().getHeight() - buttonHeight);
            circleButtons[i].setBounds(xBound, yBound, buttonWidth,
                        buttonHeight);
                
            while(intersects)
            {   
                if(intersectsComponent(circleButtons[i], circleGame.getComponents()))
                {
                    xBound = rand.nextInt(new Hangman().getContentPane().getWidth() - buttonWidth);
                    yBound = rand.nextInt(new Hangman().getContentPane().getHeight() - buttonHeight);
                    circleButtons[i].setBounds(xBound, yBound, buttonWidth,
                        buttonHeight);
                }
                else
                {
                    circleGame.add(circleButtons[i]);
                    intersects = false;
                }
            }
        }
        
        circleGame.repaint();
        circleGame.revalidate();
    }
    
    
    
    public boolean intersectsComponent(Component component, Component[] components) {
        for (Component c : components) {
            if (c.getBounds().intersects(component.getBounds())) {
                return true;
            }
        }
        return false;
    }
    public void setHighScores()
    {
        File temp;
        temp = new File("src\\highScores.TXT");
      Scanner file = null;
        try {
            file = new Scanner(temp);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(getHighScores.class.getName()).log(Level.SEVERE, null, ex);
        }
      while(file.hasNext())
      {
          Name1 = (file.next());
          Score1 = (file.nextInt());
          Name2 = (file.next());
          Score2 = (file.nextInt());
          Name3 = (file.next());
          Score3 = (file.nextInt());
          Name4 = (file.next());
          Score4 = (file.nextInt());
          Name5 = (file.next());
          Score5 = (file.nextInt());
      }
    }
    public void writeHighScores() throws IOException
    {
        File file = new File("src\\highScores.TXT");
        FileWriter fw = new FileWriter(file);
        PrintWriter pw = new PrintWriter(fw);
        
        pw.println(Name1 + " " + Score1);
        pw.println(Name2 + " " + Score2);
        pw.println(Name3 + " " + Score3);
        pw.println(Name4 + " " + Score4);
        pw.println(Name5 + " " + Score5);
        
        pw.close();
        
    }
    public void OGhighScoreCheck()
    {
        int tempor;
        String tempname;
                    
        if(Score4 < Score5)
      {
          tempname = Name4;
          tempor = Score4;
          Score4 = Score5;
          Name4 = Name5;
          Score5 = tempor;
          Name5 = tempname;
      }
      if(Score3 < Score4)
      {
          tempname = Name3;
          tempor = Score3;
          Score3 = Score4;
          Name3 = Name4;
          Score4 = tempor;
          Name4 = tempname;
      }
      if(Score2 < Score3)
      {
          tempname = Name2;
          tempor = Score2;
          Score2 = Score3;
          Name2 = Name3;
          Score3 = tempor;
          Name3 = tempname;
          
      }
      if(Score1 < Score2)
      {
          tempname = Name1;
          tempor = Score1;
          Score1 = Score2;
          Name1 = Name2;
          Score2 = tempor;
          Name2 = tempname;
      }
    }
    public void jTextFIeld1KeyTyped(java.awt.event.KeyEvent evt)
    {
        int i = evt.getKeyChar();
        if(i == KeyEvent.VK_F1)
        {
           F1Pane.showMessageDialog(null,"Ethan Bangar-Martinez: 011923873 /n Raul Pabian: 011993813","A plain message",JOptionPane.PLAIN_MESSAGE);
        }
        if(i == KeyEvent.VK_ESCAPE)
        {
            System.exit(0);
        }
    }
    public void highScoreCheck(String Name, int n)
    {
      int tempor;
      String tempname;
      if(Score5 < n)
      {
          Name5 = Name;
          Score5 = n;
      }
      if(Score4 < Score5)
      {
          tempname = Name4;
          tempor = Score4;
          Score4 = Score5;
          Name4 = Name5;
          Score5 = tempor;
          Name5 = tempname;
      }
      if(Score3 < Score4)
      {
          tempname = Name3;
          tempor = Score3;
          Score3 = Score4;
          Name3 = Name4;
          Score4 = tempor;
          Name4 = tempname;
      }
      if(Score2 < Score3)
      {
          tempname = Name2;
          tempor = Score2;
          Score2 = Score3;
          Name2 = Name3;
          Score3 = tempor;
          Name3 = tempname;
          
      }
      if(Score1 < Score2)
      {
          tempname = Name1;
          tempor = Score1;
          Score1 = Score2;
          Name1 = Name2;
          Score2 = tempor;
          Name2 = tempname;
      }
      
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hangman().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreditsBttn;
    private javax.swing.JPanel Credits_Panel;
    private javax.swing.JPanel Game;
    private javax.swing.JPanel HighScore_Panel;
    private javax.swing.JTable HighScores;
    private javax.swing.JPanel MainMenu_Panel;
    private javax.swing.JPanel Startup_Panel;
    private javax.swing.JTextPane absA;
    private javax.swing.JTextPane absA2;
    private javax.swing.JTextPane absB;
    private javax.swing.JTextPane absC;
    private javax.swing.JScrollPane absPaneA;
    private javax.swing.JScrollPane absPaneA2;
    private javax.swing.JScrollPane absPaneB;
    private javax.swing.JScrollPane absPaneC;
    private javax.swing.JScrollPane absPaneR;
    private javax.swing.JScrollPane absPaneS;
    private javax.swing.JScrollPane absPaneT;
    private javax.swing.JScrollPane absPaneT2;
    private javax.swing.JTextPane absR;
    private javax.swing.JTextPane absS;
    private javax.swing.JTextPane absT;
    private javax.swing.JTextPane absT2;
    private javax.swing.JPanel abstractPanel;
    private javax.swing.JButton backButton1;
    private javax.swing.JLabel barPic;
    private javax.swing.JButton blueButton;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JLabel bodyPic;
    private javax.swing.JButton buttonA;
    private javax.swing.JButton buttonB;
    private javax.swing.JButton buttonC;
    private javax.swing.JButton buttonD;
    private javax.swing.JButton buttonE;
    private javax.swing.JButton buttonF;
    private javax.swing.JButton buttonG;
    private javax.swing.JButton buttonH;
    private javax.swing.JButton buttonI;
    private javax.swing.JButton buttonJ;
    private javax.swing.JButton buttonK;
    private javax.swing.JButton buttonL;
    private javax.swing.JButton buttonM;
    private javax.swing.JButton buttonN;
    private javax.swing.JButton buttonO;
    private javax.swing.JButton buttonP;
    private javax.swing.JButton buttonQ;
    private javax.swing.JButton buttonR;
    private javax.swing.JButton buttonS;
    private javax.swing.JButton buttonT;
    private javax.swing.JButton buttonU;
    private javax.swing.JButton buttonV;
    private javax.swing.JButton buttonW;
    private javax.swing.JButton buttonX;
    private javax.swing.JButton buttonY;
    private javax.swing.JButton buttonZ;
    private javax.swing.JTextPane cemC;
    private javax.swing.JTextPane cemE;
    private javax.swing.JTextPane cemE2;
    private javax.swing.JTextPane cemE3;
    private javax.swing.JTextPane cemM;
    private javax.swing.JScrollPane cemPaneC;
    private javax.swing.JScrollPane cemPaneE;
    private javax.swing.JScrollPane cemPaneE2;
    private javax.swing.JScrollPane cemPaneE3;
    private javax.swing.JScrollPane cemPaneM;
    private javax.swing.JScrollPane cemPaneR;
    private javax.swing.JScrollPane cemPaneT;
    private javax.swing.JScrollPane cemPaneY;
    private javax.swing.JTextPane cemR;
    private javax.swing.JTextPane cemT;
    private javax.swing.JTextPane cemY;
    private javax.swing.JPanel cemeteryPanel;
    private javax.swing.JLabel chadLbl;
    private javax.swing.JPanel circleGame;
    private javax.swing.JTextPane climbB;
    private javax.swing.JTextPane climbC;
    private javax.swing.JTextPane climbG;
    private javax.swing.JTextPane climbI;
    private javax.swing.JTextPane climbI2;
    private javax.swing.JTextPane climbL;
    private javax.swing.JTextPane climbM;
    private javax.swing.JTextPane climbN;
    private javax.swing.JScrollPane climbPaneB;
    private javax.swing.JScrollPane climbPaneC;
    private javax.swing.JScrollPane climbPaneG;
    private javax.swing.JScrollPane climbPaneI;
    private javax.swing.JScrollPane climbPaneI2;
    private javax.swing.JScrollPane climbPaneL;
    private javax.swing.JScrollPane climbPaneM;
    private javax.swing.JScrollPane climbPaneN;
    private javax.swing.JPanel climbingPanel;
    private javax.swing.JLabel clockLabel1;
    private javax.swing.JLabel clockLabel2;
    private javax.swing.JLabel colorDisplay;
    private javax.swing.JButton credBackBttn;
    private javax.swing.JLabel credLbl;
    private javax.swing.JPanel endGamePanel;
    private javax.swing.JLabel ethanLbl;
    private javax.swing.JLabel gameOverLabel;
    private javax.swing.JLabel gameScoreLabel;
    private javax.swing.JButton greenButton;
    private javax.swing.JPanel hangbar;
    private javax.swing.JPanel hangman;
    private javax.swing.JPanel headPanel;
    private javax.swing.JLabel headPic;
    private javax.swing.JButton highScoresBttn;
    private javax.swing.JLabel highScrsLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftarmPanel;
    private javax.swing.JLabel leftarmPic;
    private javax.swing.JPanel leftlegPanel;
    private javax.swing.JLabel leftlegPic;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JLabel malonePic;
    private javax.swing.JTextPane nurseE;
    private javax.swing.JTextPane nurseN;
    private javax.swing.JScrollPane nursePaneE;
    private javax.swing.JScrollPane nursePaneN;
    private javax.swing.JScrollPane nursePaneR;
    private javax.swing.JScrollPane nursePaneS;
    private javax.swing.JScrollPane nursePaneU;
    private javax.swing.JPanel nursePanel;
    private javax.swing.JTextPane nurseR;
    private javax.swing.JTextPane nurseS;
    private javax.swing.JTextPane nurseU;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JTextPane pharA;
    private javax.swing.JTextPane pharA2;
    private javax.swing.JTextPane pharC;
    private javax.swing.JTextPane pharH;
    private javax.swing.JTextPane pharM;
    private javax.swing.JTextPane pharP;
    private javax.swing.JScrollPane pharPaneA;
    private javax.swing.JScrollPane pharPaneA2;
    private javax.swing.JScrollPane pharPaneC;
    private javax.swing.JScrollPane pharPaneH;
    private javax.swing.JScrollPane pharPaneM;
    private javax.swing.JScrollPane pharPaneP;
    private javax.swing.JScrollPane pharPaneR;
    private javax.swing.JScrollPane pharPaneY;
    private javax.swing.JTextPane pharR;
    private javax.swing.JTextPane pharY;
    private javax.swing.JPanel pharmacyPanel;
    private javax.swing.JButton playBttn;
    private javax.swing.JButton purpleButton;
    private javax.swing.JLabel raulLbl;
    private javax.swing.JButton redButton;
    private javax.swing.JPanel rightarmPanel;
    private javax.swing.JLabel rightarmPic;
    private javax.swing.JPanel rightlegPanel;
    private javax.swing.JLabel rightlegPic;
    private javax.swing.JButton skipButton;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JPanel wordPanel;
    private javax.swing.JButton yellowButton;
    private javax.swing.JLabel yourScoreLabel;
    // End of variables declaration//GEN-END:variables

    
}
